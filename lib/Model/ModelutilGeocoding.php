<?php
/**
 * ModelutilGeocoding
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  GeoCodes
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * geo.codes
 *
 * The alpha version of the https://geo.codes API service. 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeoCodes\Model;

use \ArrayAccess;
use \GeoCodes\ObjectSerializer;

/**
 * ModelutilGeocoding Class Doc Comment
 *
 * @category Class
 * @package  GeoCodes
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ModelutilGeocoding implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ModelutilGeocoding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'confidence' => 'int',
        'coordinate' => '\GeoCodes\Model\ModelutilGCSCoordinate',
        'dataset_citation_required' => 'bool',
        'matched_address' => '\GeoCodes\Model\ModelutilUSAddress',
        'result_dataset' => 'string',
        'result_location' => 'string',
        'result_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'confidence' => 'int32',
        'coordinate' => null,
        'dataset_citation_required' => null,
        'matched_address' => null,
        'result_dataset' => null,
        'result_location' => null,
        'result_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'confidence' => 'confidence',
        'coordinate' => 'coordinate',
        'dataset_citation_required' => 'dataset_citation_required',
        'matched_address' => 'matched_address',
        'result_dataset' => 'result_dataset',
        'result_location' => 'result_location',
        'result_type' => 'result_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'confidence' => 'setConfidence',
        'coordinate' => 'setCoordinate',
        'dataset_citation_required' => 'setDatasetCitationRequired',
        'matched_address' => 'setMatchedAddress',
        'result_dataset' => 'setResultDataset',
        'result_location' => 'setResultLocation',
        'result_type' => 'setResultType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'confidence' => 'getConfidence',
        'coordinate' => 'getCoordinate',
        'dataset_citation_required' => 'getDatasetCitationRequired',
        'matched_address' => 'getMatchedAddress',
        'result_dataset' => 'getResultDataset',
        'result_location' => 'getResultLocation',
        'result_type' => 'getResultType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['confidence'] = $data['confidence'] ?? null;
        $this->container['coordinate'] = $data['coordinate'] ?? null;
        $this->container['dataset_citation_required'] = $data['dataset_citation_required'] ?? null;
        $this->container['matched_address'] = $data['matched_address'] ?? null;
        $this->container['result_dataset'] = $data['result_dataset'] ?? null;
        $this->container['result_location'] = $data['result_location'] ?? null;
        $this->container['result_type'] = $data['result_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['confidence'] === null) {
            $invalidProperties[] = "'confidence' can't be null";
        }
        if (($this->container['confidence'] > 100)) {
            $invalidProperties[] = "invalid value for 'confidence', must be smaller than or equal to 100.";
        }

        if ($this->container['dataset_citation_required'] === null) {
            $invalidProperties[] = "'dataset_citation_required' can't be null";
        }
        if ($this->container['matched_address'] === null) {
            $invalidProperties[] = "'matched_address' can't be null";
        }
        if ($this->container['result_dataset'] === null) {
            $invalidProperties[] = "'result_dataset' can't be null";
        }
        if ($this->container['result_location'] === null) {
            $invalidProperties[] = "'result_location' can't be null";
        }
        if ($this->container['result_type'] === null) {
            $invalidProperties[] = "'result_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets confidence
     *
     * @return int
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param int $confidence The confidence that the address was correctly geocoded. Range 0-100. 100 was an exact record match, 0 is a wild guess.
     *
     * @return self
     */
    public function setConfidence($confidence)
    {

        if (($confidence > 100)) {
            throw new \InvalidArgumentException('invalid value for $confidence when calling ModelutilGeocoding., must be smaller than or equal to 100.');
        }

        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets coordinate
     *
     * @return \GeoCodes\Model\ModelutilGCSCoordinate|null
     */
    public function getCoordinate()
    {
        return $this->container['coordinate'];
    }

    /**
     * Sets coordinate
     *
     * @param \GeoCodes\Model\ModelutilGCSCoordinate|null $coordinate coordinate
     *
     * @return self
     */
    public function setCoordinate($coordinate)
    {
        $this->container['coordinate'] = $coordinate;

        return $this;
    }

    /**
     * Gets dataset_citation_required
     *
     * @return bool
     */
    public function getDatasetCitationRequired()
    {
        return $this->container['dataset_citation_required'];
    }

    /**
     * Sets dataset_citation_required
     *
     * @param bool $dataset_citation_required Whether the original data source requires citation via their license terms. This is not used at the moment, but will be in the future.
     *
     * @return self
     */
    public function setDatasetCitationRequired($dataset_citation_required)
    {
        $this->container['dataset_citation_required'] = $dataset_citation_required;

        return $this;
    }

    /**
     * Gets matched_address
     *
     * @return \GeoCodes\Model\ModelutilUSAddress
     */
    public function getMatchedAddress()
    {
        return $this->container['matched_address'];
    }

    /**
     * Sets matched_address
     *
     * @param \GeoCodes\Model\ModelutilUSAddress $matched_address matched_address
     *
     * @return self
     */
    public function setMatchedAddress($matched_address)
    {
        $this->container['matched_address'] = $matched_address;

        return $this;
    }

    /**
     * Gets result_dataset
     *
     * @return string
     */
    public function getResultDataset()
    {
        return $this->container['result_dataset'];
    }

    /**
     * Sets result_dataset
     *
     * @param string $result_dataset The dataset that the result was derived from.
     *
     * @return self
     */
    public function setResultDataset($result_dataset)
    {
        $this->container['result_dataset'] = $result_dataset;

        return $this;
    }

    /**
     * Gets result_location
     *
     * @return string
     */
    public function getResultLocation()
    {
        return $this->container['result_location'];
    }

    /**
     * Sets result_location
     *
     * @param string $result_location The description of where the point is. At the moment, all of the points are offset from the road, but in the future this will additionally include rooftop and entrance locations.
     *
     * @return self
     */
    public function setResultLocation($result_location)
    {
        $this->container['result_location'] = $result_location;

        return $this;
    }

    /**
     * Gets result_type
     *
     * @return string
     */
    public function getResultType()
    {
        return $this->container['result_type'];
    }

    /**
     * Sets result_type
     *
     * @param string $result_type Describes how the location was derived. All geocodings are interpolated at the moment, but in the future this will include direct lookups.
     *
     * @return self
     */
    public function setResultType($result_type)
    {
        $this->container['result_type'] = $result_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


