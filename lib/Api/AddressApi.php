<?php
/**
 * AddressApi
 * PHP version 7.3
 *
 * @category Class
 * @package  GeoCodes
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * geo.codes
 *
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeoCodes\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GeoCodes\ApiException;
use GeoCodes\Configuration;
use GeoCodes\HeaderSelector;
use GeoCodes\ObjectSerializer;

/**
 * AddressApi Class Doc Comment
 *
 * @category Class
 * @package  GeoCodes
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1AddressGeocode
     *
     * Geocode an unstructured address string
     *
     * @param  string $q The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail. (required)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \GeoCodes\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GeoCodes\Model\Geocoding
     */
    public function v1AddressGeocode($q, $min_confidence = null)
    {
        list($response) = $this->v1AddressGeocodeWithHttpInfo($q, $min_confidence);
        return $response;
    }

    /**
     * Operation v1AddressGeocodeWithHttpInfo
     *
     * Geocode an unstructured address string
     *
     * @param  string $q The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail. (required)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \GeoCodes\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GeoCodes\Model\Geocoding, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AddressGeocodeWithHttpInfo($q, $min_confidence = null)
    {
        $request = $this->v1AddressGeocodeRequest($q, $min_confidence);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeoCodes\Model\Geocoding' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeoCodes\Model\Geocoding', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeoCodes\Model\Geocoding';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeoCodes\Model\Geocoding',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AddressGeocodeAsync
     *
     * Geocode an unstructured address string
     *
     * @param  string $q The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail. (required)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AddressGeocodeAsync($q, $min_confidence = null)
    {
        return $this->v1AddressGeocodeAsyncWithHttpInfo($q, $min_confidence)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AddressGeocodeAsyncWithHttpInfo
     *
     * Geocode an unstructured address string
     *
     * @param  string $q The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail. (required)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AddressGeocodeAsyncWithHttpInfo($q, $min_confidence = null)
    {
        $returnType = '\GeoCodes\Model\Geocoding';
        $request = $this->v1AddressGeocodeRequest($q, $min_confidence);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AddressGeocode'
     *
     * @param  string $q The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail. (required)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AddressGeocodeRequest($q, $min_confidence = null)
    {
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling v1AddressGeocode'
            );
        }

        $resourcePath = '/v1/address/geocode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($q)) {
            $q = ObjectSerializer::serializeCollection($q, '', true);
        }
        if ($q !== null) {
            $queryParams['q'] = $q;
        }
        // query params
        if (is_array($min_confidence)) {
            $min_confidence = ObjectSerializer::serializeCollection($min_confidence, '', true);
        }
        if ($min_confidence !== null) {
            $queryParams['min_confidence'] = $min_confidence;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AddressStructuredGeocode
     *
     * Geocode structured addresses
     *
     * @param  string $street_address The street address line, including the number and street type. (required)
     * @param  string $city The city. Not required, but it&#39;s highly recommended that you add either the city or postal_code fields. (optional)
     * @param  string $state The state with the address. Not required, but it&#39;s highly recommended that you add the postal_code if the state is not present. (optional)
     * @param  string $postal_code The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results. (optional)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \GeoCodes\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GeoCodes\Model\Geocoding
     */
    public function v1AddressStructuredGeocode($street_address, $city = null, $state = null, $postal_code = null, $min_confidence = null)
    {
        list($response) = $this->v1AddressStructuredGeocodeWithHttpInfo($street_address, $city, $state, $postal_code, $min_confidence);
        return $response;
    }

    /**
     * Operation v1AddressStructuredGeocodeWithHttpInfo
     *
     * Geocode structured addresses
     *
     * @param  string $street_address The street address line, including the number and street type. (required)
     * @param  string $city The city. Not required, but it&#39;s highly recommended that you add either the city or postal_code fields. (optional)
     * @param  string $state The state with the address. Not required, but it&#39;s highly recommended that you add the postal_code if the state is not present. (optional)
     * @param  string $postal_code The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results. (optional)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \GeoCodes\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GeoCodes\Model\Geocoding, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AddressStructuredGeocodeWithHttpInfo($street_address, $city = null, $state = null, $postal_code = null, $min_confidence = null)
    {
        $request = $this->v1AddressStructuredGeocodeRequest($street_address, $city, $state, $postal_code, $min_confidence);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeoCodes\Model\Geocoding' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeoCodes\Model\Geocoding', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeoCodes\Model\Geocoding';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeoCodes\Model\Geocoding',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AddressStructuredGeocodeAsync
     *
     * Geocode structured addresses
     *
     * @param  string $street_address The street address line, including the number and street type. (required)
     * @param  string $city The city. Not required, but it&#39;s highly recommended that you add either the city or postal_code fields. (optional)
     * @param  string $state The state with the address. Not required, but it&#39;s highly recommended that you add the postal_code if the state is not present. (optional)
     * @param  string $postal_code The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results. (optional)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AddressStructuredGeocodeAsync($street_address, $city = null, $state = null, $postal_code = null, $min_confidence = null)
    {
        return $this->v1AddressStructuredGeocodeAsyncWithHttpInfo($street_address, $city, $state, $postal_code, $min_confidence)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AddressStructuredGeocodeAsyncWithHttpInfo
     *
     * Geocode structured addresses
     *
     * @param  string $street_address The street address line, including the number and street type. (required)
     * @param  string $city The city. Not required, but it&#39;s highly recommended that you add either the city or postal_code fields. (optional)
     * @param  string $state The state with the address. Not required, but it&#39;s highly recommended that you add the postal_code if the state is not present. (optional)
     * @param  string $postal_code The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results. (optional)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AddressStructuredGeocodeAsyncWithHttpInfo($street_address, $city = null, $state = null, $postal_code = null, $min_confidence = null)
    {
        $returnType = '\GeoCodes\Model\Geocoding';
        $request = $this->v1AddressStructuredGeocodeRequest($street_address, $city, $state, $postal_code, $min_confidence);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AddressStructuredGeocode'
     *
     * @param  string $street_address The street address line, including the number and street type. (required)
     * @param  string $city The city. Not required, but it&#39;s highly recommended that you add either the city or postal_code fields. (optional)
     * @param  string $state The state with the address. Not required, but it&#39;s highly recommended that you add the postal_code if the state is not present. (optional)
     * @param  string $postal_code The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results. (optional)
     * @param  int $min_confidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don&#39;t recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AddressStructuredGeocodeRequest($street_address, $city = null, $state = null, $postal_code = null, $min_confidence = null)
    {
        // verify the required parameter 'street_address' is set
        if ($street_address === null || (is_array($street_address) && count($street_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_address when calling v1AddressStructuredGeocode'
            );
        }

        $resourcePath = '/v1/address/structured_geocode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($street_address)) {
            $street_address = ObjectSerializer::serializeCollection($street_address, '', true);
        }
        if ($street_address !== null) {
            $queryParams['street_address'] = $street_address;
        }
        // query params
        if (is_array($city)) {
            $city = ObjectSerializer::serializeCollection($city, '', true);
        }
        if ($city !== null) {
            $queryParams['city'] = $city;
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, '', true);
        }
        if ($state !== null) {
            $queryParams['state'] = $state;
        }
        // query params
        if (is_array($postal_code)) {
            $postal_code = ObjectSerializer::serializeCollection($postal_code, '', true);
        }
        if ($postal_code !== null) {
            $queryParams['postal_code'] = $postal_code;
        }
        // query params
        if (is_array($min_confidence)) {
            $min_confidence = ObjectSerializer::serializeCollection($min_confidence, '', true);
        }
        if ($min_confidence !== null) {
            $queryParams['min_confidence'] = $min_confidence;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
